case USER:

			result = IRCParse_User (comando, &prefix, &user, &modehost, &serverother, &realname);
			pthread_mutex_lock(&canal_mutex);
			pthread_mutex_lock(&user_mutex);

			if(result == IRCERR_NOSTRING){
				syslog(LOG_INFO, "USER: No se ha introducido ninguna cadena para parsear.");
			}else if(result == IRCERR_ERRONEUSCOMMAND){
				syslog(LOG_INFO, "USER: No se encuentran todos los parámetros obligatorios.");
			}else{
				/*Para ver si existe el usuario*/
				nick_name = NULL; real = NULL; id = 0;
				result = IRCTADUser_GetData (&id, &user, &nick_name, &real, &host, &ip, &IDsocket, &creacion, &accion, &away);

				if(!nick_name){ /*Si el usuario no existe*/
					/*syslog(LOG_INFO, "NUMERO DE USUARIOS %d", numeroUsuarios);*/
					/*Annadir un nuevo usuario*/
					IRCTADUser_New (user, nick, realname, NULL, modehost, "localhost", IDsocket);
					funcionUser(user, nick, realname, modehost, IDsocket);

					strcpy(listaNicks[numeroUsuarios], "");
					strcpy(listaNicks[numeroUsuarios], nick);
					sockets[numeroUsuarios] = IDsocket; /*Numero del socket del usuario*/
					numeroUsuarios++;

				}else{ /*Si existe, liberamos memoria*/
					/*syslog(LOG_INFO,"HOLAAAAAA");*/
					free(user); free(modehost); free(prefix); free(serverother); free(realname);
					pthread_mutex_unlock(&canal_mutex);
					pthread_mutex_unlock(&user_mutex);
					break;
				}
			}

			free(prefix); free(user);free(modehost);free(serverother);free(realname);
			/*free(nick_name); id = 0; free(host);*/
			pthread_mutex_unlock(&canal_mutex);
			pthread_mutex_unlock(&user_mutex);
			break;

		case NICK:

			result = IRCParse_Nick (comando, &prefix, &nick, &msg);
			pthread_mutex_lock(&canal_mutex);
			pthread_mutex_lock(&user_mutex);

			if(result == IRCERR_NOSTRING){
				syslog(LOG_INFO, "NICK: No se ha introducido ninguna cadena para parsear.");
			}else if(result == IRCERR_ERRONEUSCOMMAND){
				syslog(LOG_INFO, "NICK: No se encuentran todos los parámetros obligatorios.");
			}else{

				if(!nick){
					/*syslog(LOG_INFO, "NICK: No hay nick.");*/
				}else{
					if(strlen(nick) < 10){ /*Longitud maxima de entrada para el nick*/
						usuario=NULL; nick_name=NULL; real=NULL;id=0;
						IRCTADUser_GetData (&id, &usuario, &nick_name, &real, &host, &ip, &IDsocket, &creacion, &accion, &away);
						if(!usuario){

						}else{
							funcionNick(id,usuario, nick_name, real, nick, IDsocket);
							/*syslog(LOG_INFO,"ENVIADO NICK %s", nick_name);*/
							free(nick);	
						}
					}	
				}
			}
			free(prefix); free(msg);
			pthread_mutex_unlock(&user_mutex);
			pthread_mutex_unlock(&canal_mutex);

			break;
