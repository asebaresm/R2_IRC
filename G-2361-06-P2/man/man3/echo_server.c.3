.TH "src/echo_server.c" 3 "Mon May 8 2017" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/echo_server.c \- 
.PP
Servidor echo utilizado para aprendizaje y pruebas con sockets\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBUFSIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBMAX_CON_REQ\fP   10"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBerror\fP (char *msg)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Detailed Description"
.PP 
Servidor echo utilizado para aprendizaje y pruebas con sockets\&. 


.PP
\fBAuthor:\fP
.RS 4
Alfonso Sebares 
.PP
Beatriz de Pablo 
.PP
Celia Mateos 
.RE
.PP
\fBDate:\fP
.RS 4
13/02/17 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define BUFSIZE   1024"
Tam\&. max\&. del buffer que se lee 
.SS "#define MAX_CON_REQ   10"
Max\&. de peticiones de conexion activas (e\&.g\&. la 11 falla si puesto a 10) 
.SH "Function Documentation"
.PP 
.SS "void error (char *msg)"

.PP
.nf
26                       {
27         perror(msg);
28         exit(1);
29 }
.fi
.SS "int main (intargc, char *argv[])"

.PP
.nf
32 {
33         int socket_desc , client_sock , c , read_size;
34         int portno;
35         int optval; /* flag value for setsockopt */
36         struct sockaddr_in server , client;
37         struct hostent *hostp; /* client host info */
38         char client_message[BUFSIZE];
39         char *hostaddrp; /* dotted decimal host addr string */
40          
41         if (argc != 2) {
42                 fprintf(stderr, "usage: %s <port>\n", argv[0]);
43                 exit(1);
44         }
45         portno = atoi(argv[1]);
46         
47         //Create socket
48         socket_desc = socket(AF_INET , SOCK_STREAM , 0);
49         if (socket_desc == -1)
50         {
51                 printf("Could not create socket");
52         }
53         puts("Socket created");
54         
55         optval = 1;
56         setsockopt(socket_desc, SOL_SOCKET, SO_REUSEADDR, (const void *)&optval , sizeof(int));
57 
58         //Prepare the sockaddr_in structure
59         memset((char *) &server, 0, sizeof(server));
60         server\&.sin_family = AF_INET;
61         server\&.sin_addr\&.s_addr = INADDR_ANY;
62         server\&.sin_port = htons((unsigned short)portno );
63          
64         //Bind
65         if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
66         {
67                 //print the error message
68                 //printf("\nstrerror: %s\n", strerror(errno));
69                 perror("bind failed\&. Error");
70                 return 1;
71         }
72         puts("bind done");
73          
74         //Listen
75         listen(socket_desc , MAX_CON_REQ);
76          
77         //Accept and incoming connection
78         puts("Waiting for incoming connections\&.\&.\&.");
79         c = sizeof(struct sockaddr_in);
80          
81         //accept connection from an incoming client
82         client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
83         if (client_sock < 0)
84         {
85                 perror("accept failed");
86                 return 1;
87         }
88 
89         hostp = gethostbyaddr((const char *)&client\&.sin_addr\&.s_addr, sizeof(client\&.sin_addr\&.s_addr), AF_INET);
90         if (hostp == NULL)
91                 error("ERROR on gethostbyaddr");
92 
93         hostaddrp = inet_ntoa(client\&.sin_addr);
94 
95         if (hostaddrp == NULL)
96                 error("ERROR on inet_ntoa\n");
97         printf("\nserver established connection with %s (%s)\n", hostp->h_name, hostaddrp);
98          
99         //Receive a message from client
100         while( strcmp(client_message, "_STOP_") != 0 )
101         {
102                 read_size = recv(client_sock , client_message , BUFSIZE , 0);
103                 printf("\nRecibido: %s", client_message);
104                 if (read_size < 0){
105                         perror("recv failed");
106                 }
107                 //Send the message back to client
108                 //write(client_sock , client_message , read_size);
109                 /*afinar un poco mas que mandar siempre BUFSIZE:*/
110                 write(client_sock , client_message , strlen(client_message)+1); 
111         }
112         
113         puts("Client disconnected");
114         fflush(stdout);
115         close(client_sock);
116          
117         return 0;
118 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
