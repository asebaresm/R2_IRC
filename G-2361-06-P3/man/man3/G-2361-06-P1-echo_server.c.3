.TH "src/G-2361-06-P1-echo_server.c" 3 "Mon May 8 2017" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/G-2361-06-P1-echo_server.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <string\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <arpa/inet\&.h>\fP
.br
\fC#include <pthread\&.h>\fP
.br
\fC#include <errno\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBBUFSIZE\fP   1024"
.br
.ti -1c
.RI "#define \fBMAX_CON_REQ\fP   10"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBerror\fP (char *msg)"
.br
.ti -1c
.RI "int \fBmain\fP (int argc, char *argv[])"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define BUFSIZE   1024"
Tam\&. max\&. del buffer que se lee 
.SS "#define MAX_CON_REQ   10"
Max\&. de peticiones de conexion activas (e\&.g\&. la 11 falla si puesto a 10) 
.SH "Function Documentation"
.PP 
.SS "void error (char * msg)"

.PP
.nf
25                       {
26         perror(msg);
27         exit(1);
28 }
.fi
.SS "int main (int argc, char * argv[])"

.PP
.nf
31 {
32         int socket_desc , client_sock , c , read_size;
33         int portno;
34         int optval; /* flag value for setsockopt */
35         struct sockaddr_in server , client;
36         struct hostent *hostp; /* client host info */
37         char client_message[BUFSIZE];
38         char *hostaddrp; /* dotted decimal host addr string */
39          
40         if (argc != 2) {
41                 fprintf(stderr, "usage: %s <port>\n", argv[0]);
42                 exit(1);
43         }
44         portno = atoi(argv[1]);
45         
46         //Create socket
47         socket_desc = socket(AF_INET , SOCK_STREAM , 0);
48         if (socket_desc == -1)
49         {
50                 printf("Could not create socket");
51         }
52         puts("Socket created");
53         
54         optval = 1;
55         setsockopt(socket_desc, SOL_SOCKET, SO_REUSEADDR, (const void *)&optval , sizeof(int));
56 
57         //Prepare the sockaddr_in structure
58         memset((char *) &server, 0, sizeof(server));
59         server\&.sin_family = AF_INET;
60         server\&.sin_addr\&.s_addr = INADDR_ANY;
61         server\&.sin_port = htons((unsigned short)portno );
62          
63         //Bind
64         if( bind(socket_desc,(struct sockaddr *)&server , sizeof(server)) < 0)
65         {
66                 //print the error message
67                 //printf("\nstrerror: %s\n", strerror(errno));
68                 perror("bind failed\&. Error");
69                 return 1;
70         }
71         puts("bind done");
72          
73         //Listen
74         listen(socket_desc , MAX_CON_REQ);
75          
76         //Accept and incoming connection
77         puts("Waiting for incoming connections\&.\&.\&.");
78         c = sizeof(struct sockaddr_in);
79          
80         //accept connection from an incoming client
81         client_sock = accept(socket_desc, (struct sockaddr *)&client, (socklen_t*)&c);
82         if (client_sock < 0)
83         {
84                 perror("accept failed");
85                 return 1;
86         }
87 
88         hostp = gethostbyaddr((const char *)&client\&.sin_addr\&.s_addr, sizeof(client\&.sin_addr\&.s_addr), AF_INET);
89         if (hostp == NULL)
90                 error("ERROR on gethostbyaddr");
91 
92         hostaddrp = inet_ntoa(client\&.sin_addr);
93 
94         if (hostaddrp == NULL)
95                 error("ERROR on inet_ntoa\n");
96         printf("\nserver established connection with %s (%s)\n", hostp->h_name, hostaddrp);
97          
98         //Receive a message from client
99         while( strcmp(client_message, "_STOP_") != 0 )
100         {
101                 read_size = recv(client_sock , client_message , BUFSIZE , 0);
102                 printf("\nRecibido: %s", client_message);
103                 if (read_size < 0){
104                         perror("recv failed");
105                 }
106                 //Send the message back to client
107                 //write(client_sock , client_message , read_size);
108                 /*afinar un poco mas que mandar siempre BUFSIZE:*/
109                 write(client_sock , client_message , strlen(client_message)+1); 
110         }
111         
112         puts("Client disconnected");
113         fflush(stdout);
114         close(client_sock);
115          
116         return 0;
117 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
