.TH "includes/G-2361-06-P3-funciones_ssl.h" 3 "Mon May 8 2017" "Doxygen" \" -*- nroff -*-
.ad l
.nh
.SH NAME
includes/G-2361-06-P3-funciones_ssl.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <openssl/ssl\&.h>\fP
.br
\fC#include <openssl/bio\&.h>\fP
.br
\fC#include <openssl/err\&.h>\fP
.br
\fC#include <openssl/rand\&.h>\fP
.br
\fC#include <openssl/x509v3\&.h>\fP
.br
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <sys/types\&.h>\fP
.br
\fC#include <sys/socket\&.h>\fP
.br
\fC#include <netdb\&.h>\fP
.br
\fC#include <netinet/in\&.h>\fP
.br
\fC#include <unistd\&.h>\fP
.br
\fC#include <syslog\&.h>\fP
.br

.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBCERT_PATH\fP   'certs/'"
.br
.ti -1c
.RI "#define \fBCERT_FILE\fP   'certs/rootcert\&.pem'"
.br
.ti -1c
.RI "#define \fBSERVER_CERT\fP   'certs/servercert\&.pem'"
.br
.ti -1c
.RI "#define \fBSERVER_KEY\fP   'certs/serverkey\&.pem'"
.br
.ti -1c
.RI "#define \fBCLIENT_CERT\fP   'certs/clientcert\&.pem'"
.br
.ti -1c
.RI "#define \fBCLIENT_KEY\fP   'certs/clientkey\&.pem'"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBinicializar_nivel_SSL\fP ()"
.br
.ti -1c
.RI "SSL_CTX * \fBfijar_contexto_SSL\fP (char *cert, char *key)"
.br
.ti -1c
.RI "SSL * \fBconectar_canal_seguro_SSL\fP (SSL_CTX *ctx, int sockfd)"
.br
.ti -1c
.RI "SSL * \fBaceptar_canal_seguro_SSL\fP (SSL_CTX *ctx, int sockfd)"
.br
.ti -1c
.RI "int \fBevaluar_post_connectar_SSL\fP (SSL *ssl)"
.br
.ti -1c
.RI "int \fBenviar_datos_SSL\fP (SSL *ssl, char *buffer)"
.br
.ti -1c
.RI "int \fBrecibir_datos_SSL\fP (SSL *ssl, char *buffer)"
.br
.ti -1c
.RI "void \fBcerrar_canal_SSL\fP (SSL **ssl, SSL_CTX **ctx, int sockfd)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define CERT_FILE   'certs/rootcert\&.pem'"
Fichero con el certificado CA SSL 
.SS "#define CERT_PATH   'certs/'"
Carpeta de los certificados 
.SS "#define CLIENT_CERT   'certs/clientcert\&.pem'"
Fichero con el certificado del cliente 
.SS "#define CLIENT_KEY   'certs/clientkey\&.pem'"
Fichero con la llave del cliente 
.SS "#define SERVER_CERT   'certs/servercert\&.pem'"
Fichero con el certificado del servidor 
.SS "#define SERVER_KEY   'certs/serverkey\&.pem'"
Fichero con la llave del servidor 
.SH "Function Documentation"
.PP 
.SS "SSL* aceptar_canal_seguro_SSL (SSL_CTX * ctx, int sockfd)"

.PP
.nf
120                                                       {
121         SSL * ssl=NULL;
122         
123         /*puntero a la estructura creada será guardado para añadir seguridad al canal*/
124         ssl=SSL_new(ctx);
125         
126         if(ssl==NULL || ctx==NULL){
127                 return NULL;
128         }
129 
130 
131         /*asociar la estructura SSL creada el canal de comunicación*/
132         if(!SSL_set_fd(ssl, sockfd)){
133                 return NULL;
134         }
135 
136         
137 
138         /* función bloqueará al servidor y lo pondrá en espera hasta recibir el hand-
139 shake por parte del cliente*/
140         if(!SSL_accept(ssl)){
141                 return NULL;
142         }
143         
144         return ssl;
145 }
.fi
.SS "void cerrar_canal_SSL (SSL ** ssl, SSL_CTX ** ctx, int sockfd)"

.PP
.nf
159                                                           {
160         
161         /*cierra el canal y libera las estructuras*/
162         if(*ssl != NULL){
163                 SSL_shutdown(*ssl);
164                 SSL_free(*ssl);
165                 ssl=NULL;
166         }
167 
168         if(*ctx != NULL){
169                 SSL_CTX_free(*ctx);
170                 ctx=NULL;
171         }
172 
173         close(sockfd);
174 }
.fi
.SS "SSL* conectar_canal_seguro_SSL (SSL_CTX * ctx, int sockfd)"

.PP
.nf
70                                                        {
71         
72         SSL * ssl=NULL;
73 
74         /*puntero a la estructura creada será guardado para añadir seguridad al canal*/
75         ssl=SSL_new(ctx);
76 
77         if(ssl==NULL){
78                 return NULL;
79         }
80 
81         /*asociar la estructura SSL creada el canal de comunicación*/
82         if(!SSL_set_fd(ssl, sockfd)){
83                 return NULL;
84         }
85 
86 
87         /* inicializará el handshake con el servidor*/
88         if(!SSL_connect(ssl)){
89                 return NULL;
90         }
91 
92         return ssl;
93 }
.fi
.SS "int enviar_datos_SSL (SSL * ssl, char * buffer)"

.PP
.nf
108                                             {
109 
110         if(!buffer || sizeof(buffer) < 0){
111                 return -1;
112         }
113 
114         /* envia datos */
115         return SSL_write(ssl, buffer, BUFSIZE);
116 }
.fi
.SS "int evaluar_post_connectar_SSL (SSL * ssl)"

.PP
.nf
96                                          {
97 
98         /* comprobar que de hecho se ha recibido un certificado*/
99         if(SSL_get_peer_certificate(ssl)==NULL){
100                 return 0;
101         }
102 
103         /* validar el certificado con algún CA*/
104         return SSL_get_verify_result(ssl);
105 }
.fi
.SS "SSL_CTX* fijar_contexto_SSL (char * cert, char * key)"

.PP
.nf
32                                                   {
33 
34         SSL_CTX *ctx;
35 
36         /*crea un nuevo contexto para la utilización de
37 la capa SSL y lo inicializa*/
38         ctx=SSL_CTX_new(SSLv23_method());
39         if (ctx==NULL){
40                 return NULL;
41         }
42         
43         /*validar los certificados recibidos por la aplicación*/
44         if (!SSL_CTX_load_verify_locations(ctx,CERT_FILE,CERT_PATH)){
45                 return 0;
46         }
47 
48         /*utilizar
49 los certificados de las entidades CA bien conocidas*/
50         SSL_CTX_set_default_verify_paths(ctx);
51 
52         /*especificar el certificado que utilizará nuestra aplicación*/
53         if(!SSL_CTX_use_certificate_chain_file(ctx, cert)){
54                 ERR_print_errors_fp(stdout);
55                 return 0;
56         }
57         
58         /*especificar la clave privada de nuestra
59 aplicación*/
60         SSL_CTX_use_PrivateKey_file(ctx, key, SSL_FILETYPE_PEM);
61 
62         /*fijará el modo de funcionamiento de nuestra
63 aplicación*/
64         SSL_CTX_set_verify(ctx, SSL_VERIFY_PEER, NULL);
65         
66         return ctx;
67 }
.fi
.SS "void inicializar_nivel_SSL ()"

.PP
.nf
22                             {
23 
24         /* Capturamos los errores que puede dar de SSL*/
25         SSL_load_error_strings();
26         /* Iniciamos SSL*/
27         SSL_library_init();
28 
29 }
.fi
.SS "int recibir_datos_SSL (SSL * ssl, char * buffer)"

.PP
.nf
148                                               {
149 
150         if(!ssl || sizeof(buffer) < 0){
151                 return -1;
152         }
153 
154         /* recibe datos */
155         return SSL_read(ssl, buffer, BUFSIZE);
156 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen from the source code\&.
